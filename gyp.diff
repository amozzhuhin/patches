diff --git a/pylib/gyp/MSVSVersion.py b/pylib/gyp/MSVSVersion.py
index 71582ccd..5e316e0e 100644
--- a/pylib/gyp/MSVSVersion.py
+++ b/pylib/gyp/MSVSVersion.py
@@ -162,7 +162,7 @@ def _RegistryQueryBase(sysdir, key, value):
   p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
   # Obtain the stdout from reg.exe, reading to the end so p.returncode is valid
   # Note that the error text may be in [1] in some cases
-  text = p.communicate()[0]
+  text = p.communicate()[0].decode('utf-8', 'ignore')
   # Check return code from reg.exe; officially 0==success and 1==error
   if p.returncode:
     return None
@@ -260,15 +260,25 @@ def _CreateVersion(name, path, sdk_based=False):
   if path:
     path = os.path.normpath(path)
   versions = {
+      '2022': VisualStudioVersion('2022',
+                                  'Visual Studio 2022',
+                                  solution_version='12.00',
+                                  project_version='17.0',
+                                  flat_sln=False,
+                                  uses_vcxproj=True,
+                                  path=path,
+                                  sdk_based=sdk_based,
+                                  default_toolset='v143',
+                                  compatible_sdks=['v10.0']),
       '2019': VisualStudioVersion('2019',
                                   'Visual Studio 2019',
                                   solution_version='12.00',
-                                  project_version='15.0',
+                                  project_version='16.0',
                                   flat_sln=False,
                                   uses_vcxproj=True,
                                   path=path,
                                   sdk_based=sdk_based,
-                                  default_toolset='v141',
+                                  default_toolset='v142',
                                   compatible_sdks=['v8.1', 'v10.0']),
       '2017': VisualStudioVersion('2017',
                                   'Visual Studio 2017',
@@ -381,7 +391,7 @@ def _ConvertToCygpath(path):
   """Convert to cygwin path if we are using cygwin."""
   if sys.platform == 'cygwin':
     p = subprocess.Popen(['cygpath', path], stdout=subprocess.PIPE)
-    path = p.communicate()[0].strip()
+    path = p.communicate()[0].decode('utf-8', 'ignore').strip()
   return path
 
 
@@ -400,6 +410,8 @@ def _DetectVisualStudioVersions(versions_to_check, force_express):
       2013(e) - Visual Studio 2013 (12)
       2015    - Visual Studio 2015 (14)
       2017    - Visual Studio 2017 (15)
+      2019    - Visual Studio 2019 (16)
+      2022    - Visual Studio 2022 (17)
     Where (e) is e for express editions of MSVS and blank otherwise.
   """
   version_to_year = {
@@ -409,10 +421,19 @@ def _DetectVisualStudioVersions(versions_to_check, force_express):
       '11.0': '2012',
       '12.0': '2013',
       '14.0': '2015',
-      '15.0': '2017'
+      '15.0': '2017',
+      '16.0': '2019',
+      '17.0': '2022'
   }
+  shell_path = os.environ.get('VSINSTALLDIR')
+  shell_path = _ConvertToCygpath(shell_path) if shell_path else None
+  shell_version = os.environ.get('VisualStudioVersion') if shell_path else None
   versions = []
   for version in versions_to_check:
+    if version == shell_version:
+      if os.path.exists(shell_path):
+        versions.append(_CreateVersion(version_to_year[version], shell_path))
+
     # Old method of searching for which VS version is installed
     # We don't use the 2010-encouraged-way because we also want to get the
     # path to the binaries, which it doesn't offer.
@@ -470,7 +491,7 @@ def SelectVisualStudioVersion(version='auto', allow_fallback=True):
   if version == 'auto':
     version = os.environ.get('GYP_MSVS_VERSION', 'auto')
   version_map = {
-    'auto': ('15.0', '14.0', '12.0', '10.0', '9.0', '8.0', '11.0'),
+    'auto': ('17.0', '16.0', '15.0', '14.0', '12.0', '10.0', '9.0', '8.0', '11.0'),
     '2005': ('8.0',),
     '2005e': ('8.0',),
     '2008': ('9.0',),
@@ -483,6 +504,8 @@ def SelectVisualStudioVersion(version='auto', allow_fallback=True):
     '2013e': ('12.0',),
     '2015': ('14.0',),
     '2017': ('15.0',),
+    '2019': ('16.0',),
+    '2022': ('17.0',),
   }
   override_path = os.environ.get('GYP_MSVS_OVERRIDE_PATH')
   if override_path:
diff --git a/pylib/gyp/generator/cmake.py b/pylib/gyp/generator/cmake.py
index 4a2041cf..e5333926 100644
--- a/pylib/gyp/generator/cmake.py
+++ b/pylib/gyp/generator/cmake.py
@@ -1078,6 +1078,23 @@ def WriteTarget(namer, qualified_target, target_dicts, build_dir, config_to_use,
 
       output.write(')\n')
 
+  # Precompile header
+  precompiled_header = config.get('cmake_precompiled_header', '')
+  if precompiled_header:
+    precompiled_header_script = config.get('cmake_precompiled_header_script', '')
+    if not precompiled_header_script:
+      print ('ERROR: cmake_precompiled_header requires cmake_precompiled_header_script')
+    cmake_precompiled_header = NormjoinPath(path_from_cmakelists_to_gyp, precompiled_header)
+    cmake_precompiled_header_script = NormjoinPathForceCMakeSource(path_from_cmakelists_to_gyp, precompiled_header_script)
+    output.write('include(')
+    output.write(cmake_precompiled_header_script)
+    output.write(')\n')
+    output.write('add_precompiled_header(')
+    output.write(cmake_target_name)
+    output.write(' ')
+    output.write(cmake_precompiled_header)
+    output.write(')\n')
+
   UnsetVariable(output, 'TOOLSET')
   UnsetVariable(output, 'TARGET')
 
@@ -1120,6 +1137,8 @@ def GenerateOutputForConfig(target_list, target_dicts, data,
   SetVariable(output, 'configuration', config_to_use)
 
   ar = None
+  ranlib = None
+  nm = None
   cc = None
   cxx = None
 
@@ -1129,17 +1148,27 @@ def GenerateOutputForConfig(target_list, target_dicts, data,
   for key, value in make_global_settings:
     if key == 'AR':
       ar = os.path.join(build_to_top, value)
+    if key == 'RANLIB':
+      ranlib = os.path.join(build_to_top, value)
+    if key == 'NM':
+      nm = os.path.join(build_to_top, value)
     if key == 'CC':
       cc = os.path.join(build_to_top, value)
     if key == 'CXX':
       cxx = os.path.join(build_to_top, value)
 
   ar = gyp.common.GetEnvironFallback(['AR_target', 'AR'], ar)
+  ranlib = gyp.common.GetEnvironFallback(['RANLIB_target', 'RANLIB'], ranlib)
+  nm = gyp.common.GetEnvironFallback(['NM_target', 'NM'], nm)
   cc = gyp.common.GetEnvironFallback(['CC_target', 'CC'], cc)
   cxx = gyp.common.GetEnvironFallback(['CXX_target', 'CXX'], cxx)
 
   if ar:
     SetVariable(output, 'CMAKE_AR', ar)
+  if ranlib:
+    SetVariable(output, 'CMAKE_RANLIB', ranlib)
+  if nm:
+    SetVariable(output, 'CMAKE_NM', nm)
   if cc:
     SetVariable(output, 'CMAKE_C_COMPILER', cc)
   if cxx:
diff --git a/pylib/gyp/generator/msvs.py b/pylib/gyp/generator/msvs.py
index 843e7067..c5c43737 100644
--- a/pylib/gyp/generator/msvs.py
+++ b/pylib/gyp/generator/msvs.py
@@ -116,7 +116,7 @@ def _GetDomainAndUserName():
     if not domain or not username:
       call = subprocess.Popen(['net', 'config', 'Workstation'],
                               stdout=subprocess.PIPE)
-      config = call.communicate()[0]
+      config = call.communicate()[0].decode('utf-8', 'ignore')
       username_re = re.compile(r'^User name\s+(\S+)', re.MULTILINE)
       username_match = username_re.search(config)
       if username_match:
diff --git a/pylib/gyp/generator/xcode.py b/pylib/gyp/generator/xcode.py
index 8bc22bed..24bee427 100644
--- a/pylib/gyp/generator/xcode.py
+++ b/pylib/gyp/generator/xcode.py
@@ -74,6 +74,12 @@ generator_additional_non_configuration_keys = [
   'ios_app_extension',
   'ios_watch_app',
   'ios_watchkit_extension',
+
+  'mac_sandbox', # sandbox support
+  'mac_sandbox_development_team',
+
+  'mac_hardened_runtime', # hardened runtime support
+
   'mac_bundle',
   'mac_bundle_resources',
   'mac_framework_headers',
@@ -774,6 +780,39 @@ def GenerateOutput(target_list, target_dicts, data, params):
     xcode_targets[qualified_target] = xct
     xcode_target_to_target_dict[xct] = spec
 
+    # sandbox and hardened runtime support
+    is_sandbox = int(spec.get('mac_sandbox', 0))
+    is_hardened_runtime = int(spec.get('mac_hardened_runtime', 0))
+    if is_sandbox or is_hardened_runtime:
+      try:
+        tmp = pbxp._properties['attributes']['TargetAttributes']
+      except KeyError:
+        pbxp._properties['attributes']['TargetAttributes'] = {}
+      try:
+        tmp = pbxp._properties['attributes']['TargetAttributes'][xct]
+      except KeyError:
+        pbxp._properties['attributes']['TargetAttributes'][xct] = {}
+      try:
+        tmp = pbxp._properties['attributes']['TargetAttributes'][xct]['SystemCapabilities']
+      except KeyError:
+        pbxp._properties['attributes']['TargetAttributes'][xct]['SystemCapabilities'] = {}
+
+    if is_sandbox:
+      dev_team = spec.get('mac_sandbox_development_team', '%%ERROR%%')
+      assert dev_team != '%%ERROR%%', (
+          'mac_sandbox must be accompanied by mac_sandbox_development_team (target "%s")' %
+          target_name)
+      pbxp._properties['attributes']['TargetAttributes'][xct]['DevelopmentTeam'] = dev_team
+      pbxp._properties['attributes']['TargetAttributes'][xct]['SystemCapabilities']['com.apple.Sandbox'] = {
+        'enabled': 1,
+      }
+
+    # hardened runtime support
+    if is_hardened_runtime:
+      pbxp._properties['attributes']['TargetAttributes'][xct]['SystemCapabilities']['com.apple.HardenedRuntime'] = {
+        'enabled': 1,
+      }
+
     spec_actions = spec.get('actions', [])
     spec_rules = spec.get('rules', [])
 
@@ -1132,7 +1171,8 @@ exit 1
         groups = [x for x in groups if not x.endswith('_excluded')]
       for group in groups:
         for item in rule.get(group, []):
-          pbxp.AddOrGetFileInRootGroup(item)
+          concrete_item = ExpandXcodeVariables(item, rule_input_dict)
+          pbxp.AddOrGetFileInRootGroup(concrete_item)
 
     # Add "sources".
     for source in spec.get('sources', []):
diff --git a/pylib/gyp/input.py b/pylib/gyp/input.py
index 4c128916..2bea3341 100644
--- a/pylib/gyp/input.py
+++ b/pylib/gyp/input.py
@@ -1183,7 +1183,7 @@ def LoadVariablesFromVariablesDict(variables, the_dict, the_dict_key):
       if variable_name in variables:
         # If the variable is already set, don't set it.
         continue
-      if the_dict_key is 'variables' and variable_name in the_dict:
+      if the_dict_key == 'variables' and variable_name in the_dict:
         # If the variable is set without a % in the_dict, and the_dict is a
         # variables dict (making |variables| a varaibles sub-dict of a
         # variables dict), use the_dict's definition.
diff --git a/pylib/gyp/msvs_emulation.py b/pylib/gyp/msvs_emulation.py
index 63d40e63..fab4890d 100644
--- a/pylib/gyp/msvs_emulation.py
+++ b/pylib/gyp/msvs_emulation.py
@@ -139,7 +139,7 @@ def _FindDirectXInstallation():
     # Setup params to pass to and attempt to launch reg.exe.
     cmd = ['reg.exe', 'query', r'HKLM\Software\Microsoft\DirectX', '/s']
     p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
-    for line in p.communicate()[0].splitlines():
+    for line in p.communicate()[0].decode('utf-8', 'ignore').splitlines():
       if 'InstallPath' in line:
         dxsdk_dir = line.split('    ')[3] + "\\"
 
@@ -321,7 +321,7 @@ class MsvsSettings(object):
     # first level is globally for the configuration (this is what we consider
     # "the" config at the gyp level, which will be something like 'Debug' or
     # 'Release'), VS2015 and later only use this level
-    if self.vs_version.short_name >= 2015:
+    if int(self.vs_version.short_name) >= 2015:
       return config
     # and a second target-specific configuration, which is an
     # override for the global one. |config| is remapped here to take into
@@ -485,7 +485,7 @@ class MsvsSettings(object):
         prefix='/arch:')
     cflags.extend(['/FI' + f for f in self._Setting(
         ('VCCLCompilerTool', 'ForcedIncludeFiles'), config, default=[])])
-    if self.vs_version.project_version >= 12.0:
+    if float(self.vs_version.project_version) >= 12.0:
       # New flag introduced in VS2013 (project version 12.0) Forces writes to
       # the program database (PDB) to be serialized through MSPDBSRV.EXE.
       # https://msdn.microsoft.com/en-us/library/dn502518.aspx
@@ -1054,6 +1054,7 @@ def GenerateEnvironmentFiles(toplevel_build_dir, generator_flags,
     variables, _ = popen.communicate()
     if popen.returncode != 0:
       raise Exception('"%s" failed with error %d' % (args, popen.returncode))
+    variables = variables.decode('utf-8', 'ignore')
     env = _ExtractImportantEnvironment(variables)
 
     # Inject system includes from gyp files into INCLUDE.
@@ -1073,6 +1074,7 @@ def GenerateEnvironmentFiles(toplevel_build_dir, generator_flags,
       'for', '%i', 'in', '(cl.exe)', 'do', '@echo', 'LOC:%~$PATH:i'))
     popen = subprocess.Popen(args, shell=True, stdout=subprocess.PIPE)
     output, _ = popen.communicate()
+    output = output.decode('utf-8', 'ignore')
     cl_paths[arch] = _ExtractCLPath(output)
   return cl_paths
 
diff --git a/pylib/gyp/win_tool.py b/pylib/gyp/win_tool.py
index 89734846..fb63b711 100755
--- a/pylib/gyp/win_tool.py
+++ b/pylib/gyp/win_tool.py
@@ -132,11 +132,12 @@ class WinTool(object):
     link = subprocess.Popen(args, shell=sys.platform == 'win32', env=env,
                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
     out, _ = link.communicate()
+    out = out.decode('utf-8', 'ignore')
     for line in out.splitlines():
       if (not line.startswith('   Creating library ') and
           not line.startswith('Generating code') and
           not line.startswith('Finished generating code')):
-        print(line)
+        print(line.encode("utf-8"))
     return link.returncode
 
   def ExecLinkWithManifests(self, arch, embed_manifest, out, ldcmd, resname,
@@ -197,8 +198,8 @@ class WinTool(object):
       # and sometimes doesn't unfortunately.
       with open(our_manifest, 'r') as our_f:
         with open(assert_manifest, 'r') as assert_f:
-          our_data = our_f.read().translate(None, string.whitespace)
-          assert_data = assert_f.read().translate(None, string.whitespace)
+          our_data = our_f.read().translate(str.maketrans('', '', string.whitespace))
+          assert_data = assert_f.read().translate(str.maketrans('', '', string.whitespace))
       if our_data != assert_data:
         os.unlink(out)
         def dump(filename):
@@ -225,6 +226,7 @@ class WinTool(object):
     popen = subprocess.Popen(args, shell=True, env=env,
                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
     out, _ = popen.communicate()
+    out = out.decode(sys.stdout.encoding, 'ignore')
     for line in out.splitlines():
       if line and 'manifest authoring warning 81010002' not in line:
         print(line)
@@ -257,6 +259,7 @@ class WinTool(object):
     popen = subprocess.Popen(args, shell=True, env=env,
                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
     out, _ = popen.communicate()
+    out = out.decode('utf-8', 'ignore')
     # Filter junk out of stdout, and write filtered versions. Output we want
     # to filter is pairs of lines that look like this:
     # Processing C:\Program Files (x86)\Microsoft SDKs\...\include\objidl.idl
@@ -276,6 +279,7 @@ class WinTool(object):
     popen = subprocess.Popen(args, shell=True, env=env,
                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
     out, _ = popen.communicate()
+    out = out.decode('utf-8', 'ignore')
     for line in out.splitlines():
       if (not line.startswith('Copyright (C) Microsoft Corporation') and
           not line.startswith('Microsoft (R) Macro Assembler') and
@@ -291,6 +295,7 @@ class WinTool(object):
     popen = subprocess.Popen(args, shell=True, env=env,
                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
     out, _ = popen.communicate()
+    out = out.decode('utf-8', 'ignore')
     for line in out.splitlines():
       if (not line.startswith('Microsoft (R) Windows (R) Resource Compiler') and
           not line.startswith('Copyright (C) Microsoft Corporation') and
